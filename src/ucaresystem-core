#!/bin/bash
#shellcheck disable=SC1008
set -e
#
#
#_______________________________________________
#THIS IS THE Terminal Version of uCareSystem
#_______________________________________________
# Name   : uCareSystem
# License: GPL3 (http://www.gnu.org/licenses/gpl.html)
# Author : Salih Emin
# WebSite: http://utappia.org
# Email  : salih-emin(at)ubuntu.com
# Date   : 11-12-2024 (first release 19-02-2009)
# Version: 25.06.05
# System : Ubuntu Linux and derivatives. With Deb, Snap or Flatpak. (Partial support for Debian and WSL2) 
# Description:
#This simple script will automatically refresh your package list, download and install
#updates (if there are any),
#remove any remaining packages and configuration files without interference.
SECONDS=0
## Script starts here

# Variables
GREEN="\e[32m"
CYAN="\e[36m"
MAGENTA="\e[35m"
YELLOW="\e[33m"
ENDCOLOR="\e[0m"
DIST_CODENAME=$(lsb_release --codename | cut -f2)
DATE=$(date +%F_%T)
UCARE_VERSION="25.06.05"
VER_CODENAME="W. Schwartz"
PREV_VER="25.04"
USERNAME=$(logname 2>/dev/null || echo "$USER")
DONATE="https://www.paypal.com/donate/?hosted_button_id=SATQ6Y9S3UCSG"
# Check for root/sudo privileges
if [[ $EUID -ne 0 ]] ; then
    echo -e "\n${CYAN}▸ Restarting with administrator privileges...${ENDCOLOR}\n"
    exec sudo "$0" "$@" 
    exit 1
fi

# Function to check internet connectivity
function CHECK_INTERNET {
    if curl -4 -s --head http://www.google.com | head -n 1 | grep "200 OK" > /dev/null; then
        return 0  # Internet connection is available
    else
        return 1  # No internet connection
    fi
}

# Check internet connectivity
if ! CHECK_INTERNET; then
   echo -e "${YELLOW}No internet connection detected... ${ENDCOLOR}"
   sleep 1
   echo "Please ensure that your system is connected to the internet,"
   echo "and then try again..." 
   echo "Now I will just exit..." 1>&2
   echo ""
   sleep 2
   exit 1
fi

# Simple countdown function
function COUNTDOWN {
    local secs=$1
    while [ "$secs" -ge 0 ]; do
        if [ "$secs" -eq 0 ]; then
            # Clear the line completely and show just the "now!" message
            echo -ne "\r$MESSAGE ${YELLOW}now${ENDCOLOR}!                                                  \n"
            break
        else
            echo -ne "$MESSAGE in ${YELLOW}$secs ${ENDCOLOR}seconds... (to exit now, press Ctrl+C) \r"
        fi
        sleep 1
        : $((secs--))
    done
}
duration=5 # countdown duration in seconds

function WELCOME_SCREEN {
	echo "________________________________________________________"
	echo ""
	echo -e "           ${CYAN} uCareSystem $UCARE_VERSION ${ENDCOLOR}"
	echo "            ~~~~~~~~~~~~~~~~~~~~"
	echo " Welcome to all-in-one System Update and maintenance app"
	echo ""
	echo " 		Dear $USERNAME"
	echo ""
	echo " If you've found it helpful and it has saved you time"
	echo " please consider supporting its development with a"
	echo " donation via PayPal. Your support not only fuels"
	echo " continuous improvement but also inspires and"
	echo " motivates me to keep pushing forward while also shows" 
	echo " your appreciation for the time and effort that I have"
	echo "               put into the project:"
	echo ""
	echo -e "${CYAN}$DONATE ${ENDCOLOR}"
	echo "________________________________________________________"
	echo -e "     ${CYAN} Release honored to: $VER_CODENAME ${ENDCOLOR}"
	echo ""
	# start the countdown
	MESSAGE="uCareSystem will start"
	COUNTDOWN "$duration"
}

# Function to handle kernel cleanup
function CLEANUP_OLD_KERNELS {
    local keep_count=${1:-2}  # Default to keeping 2 kernels if not specified
    local current_kernel
    local purge_list=""
    local final_purge_list=""
    local min_kernels=2  # Minimum required: current + one backup
    
    echo -e "${GREEN}▸ Starting kernel cleanup...${ENDCOLOR}"
    
    # Validate keep_count
    if ! [[ "$keep_count" =~ ^[0-9]+$ ]]; then
        echo -e "${YELLOW}Error: Invalid number specified for kernels to keep${ENDCOLOR}"
        echo -e "${YELLOW}Usage: Must be a positive number greater than or equal to $min_kernels${ENDCOLOR}"
        return 1
    fi
    
    # Safety check - ensure we keep at least current + one backup
    if [ "$keep_count" -lt "$min_kernels" ]; then
        echo -e "${YELLOW}Warning: Cannot keep fewer than $min_kernels kernels for safety${ENDCOLOR}"
        echo -e "${YELLOW}Setting keep count to minimum safe value: $min_kernels${ENDCOLOR}"
        keep_count=$min_kernels
    fi
    
    # Get current running kernel
    current_kernel=$(uname -r)
    echo -e "${YELLOW}Current kernel: ${current_kernel}${ENDCOLOR}"
    
    # Build list of kernel packages to purge
    # This uses the actual kernel files in /boot to determine which kernels to keep
    purge_list=$(find /boot -maxdepth 1 -name "vmlinuz-*" -printf "%T@ %p\n" | \
        sort -n | \
        cut -d' ' -f2- | \
        head -n -"${keep_count}" | \
        grep -v "${current_kernel}$" | \
        cut -d- -f2- | \
        awk '{print "linux-image-" $0 " linux-headers-" $0}')
    
    # Verify each package exists before adding to purge list
    final_purge_list=""
    for pkg in $purge_list; do
        if dpkg-query -s "$pkg" >/dev/null 2>&1; then
            final_purge_list="${final_purge_list} ${pkg}"
        fi
    done
    
    if [ -z "${final_purge_list}" ]; then
        echo -e "${YELLOW}No kernels are eligible for removal${ENDCOLOR}"
        return 0
    fi
    
    echo -e "${YELLOW}The following kernels will be removed:${ENDCOLOR}"
    echo "${final_purge_list}"
    echo
    
    # Remove the packages
    sudo apt autoremove -y --purge "${final_purge_list}"
    
    echo -e "${YELLOW}Kernel cleanup completed${ENDCOLOR}"
}

function MAINTENANCE {
	echo
	echo
	echo -e "${MAGENTA} Started ${ENDCOLOR} "
	sleep 1
	echo
	echo -e "${GREEN}▸ Checking Disk usage before System Maintenance ${ENDCOLOR}"
	sleep 1	
	echo
	df_output=$(df -h / | awk 'NR==2 {print "Percentage of disk space used:", $5, "\nFree space available:", $4}')
	echo ""
	echo -e "${YELLOW}${df_output}${ENDCOLOR}"
	echo
	sleep 1

	# The following is for when the unit file, source configuration file or drop-ins 
	# of apt-news.service changed on disk and systemd wasn't aware of it.
	if command -v systemctl &> /dev/null && [ ! -f /proc/sys/fs/binfmt_misc/WSLInterop ]; then
		echo -e "${YELLOW}Reloading systemd manager configuration ${ENDCOLOR}"
		sudo systemctl daemon-reload
		sleep 1
		echo 
	fi
	## Updates package lists
	echo -e "${GREEN}▸ Updating package lists ${ENDCOLOR}"
	echo
	# Update package lists and filter out warnings
	sudo apt update 2> >(sed 's/^WARNING.*//') |
	# Print each line with padding to fit the terminal width
	xargs -I{} printf '%-*s\r' "$(tput cols)" "{}" && echo
	echo
	echo -e "${GREEN}▸ Finished updating package lists ${ENDCOLOR}"
	sleep 1
	echo

	## Updates packages and libraries
	echo -e "${GREEN}▸ Installing system package upgrades...${ENDCOLOR}"
	sudo apt full-upgrade -V -y;
	echo
	echo -e "${GREEN}▸ Finished upgrading system packages and libraries ${ENDCOLOR}"
	sleep 1
	echo

	## Removes unneeded packages
	sudo apt autoremove -y --purge;
	echo					
	echo -e "${GREEN}▸ Finished removing unneeded packages ${ENDCOLOR}"
	sleep 1
	echo
	echo -e "${GREEN}▸ Checking for Snap and Flatpak updates ${ENDCOLOR}"
	echo
	# Check if Snap is installed
	if command -v snap &> /dev/null && [ ! -f /proc/sys/fs/binfmt_misc/WSLInterop ]; then
		# Stop all running Snap applications
		echo -e "${YELLOW}Stopping all running Snap applications... ${ENDCOLOR}"
		stopped_snaps=()
		while IFS= read -r snapname; do
			if sudo snap stop "$snapname" &>/dev/null; then
				stopped_snaps+=("$snapname")
			fi
		done < <(sudo snap list | awk '/^name/ {next} {print $1}')

		# Print the names of stopped Snap applications
		if [ "${#stopped_snaps[@]}" -gt 0 ]; then
			echo -e "${YELLOW}Stopped Snap applications: ${ENDCOLOR}"
			for snapname in "${stopped_snaps[@]}"; do
				echo "$snapname"
			done
			# Check for updates and install them
			echo -e "${YELLOW}Checking for Snap package updates and installing them... ${ENDCOLOR}"
			echo
			sudo snap refresh

			# Remove old revisions of Snap packages
			echo
			echo -e "${YELLOW}Removing old revisions of Snap packages ${ENDCOLOR}"
			echo
			LANG=C sudo snap list --all | awk '/disabled/{print $1, $3}' | 
				while read -r snapname revision; do
					sudo snap remove --purge "$snapname" --revision="$revision"
				done

			echo -e "${YELLOW}Old revisions of Snap packages removed successfully. ${ENDCOLOR}"
			sleep 1
			# Start previously stopped Snap applications
			echo
			echo -e "${YELLOW}Starting previously stopped Snap applications... ${ENDCOLOR}"
			for snapname in "${stopped_snaps[@]}"; do
				sudo snap start "$snapname" &>/dev/null
			done
		else
			echo -e "${YELLOW}No Snap applications were stopped. ${ENDCOLOR}"
		fi

	else
		echo
		echo -e "${YELLOW}Snap is not available on this system. Skipping. ${ENDCOLOR}"
		sleep 1
	fi
	# Check if flatpak is installed then start maintenance
	if command -v flatpak &>/dev/null; then
		echo ""
		echo -e "${YELLOW}Checking for Flatpak package updates and installing them...  ${ENDCOLOR}"
		sleep 1
		sudo flatpak update -y
		echo ""
		echo -e "${YELLOW}Removing unused Flatpak packages ${ENDCOLOR}"
		sudo flatpak uninstall --unused -y
		sleep 1
		echo    
	else
		echo ""
		echo -e "${YELLOW}Flatpak is not available on this system. Skipping. ${ENDCOLOR}"
		sleep 1
	fi
	echo					
	echo -e "${GREEN}▸ Finished Snap and/or Flatpak package maintenance ${ENDCOLOR}"
	sleep 1
	echo

	# Call kernel cleanup with default value
	echo -e "${GREEN}▸ Checking for old kernels...${ENDCOLOR}"
	if [ ! -f /proc/sys/fs/binfmt_misc/WSLInterop ]; then
		CLEANUP_OLD_KERNELS 2
	else
		echo -e "${YELLOW}Skipping kernel cleanup in WSL environment${ENDCOLOR}"
	fi

	## Removes unused config files of uninstalled packages
	dpkg --get-selections | grep deinstall | cut -f1 | xargs sudo apt autoremove -y --purge;
	echo
	echo -e "${GREEN}▸ Finished removing the config files of uninstalled packages ${ENDCOLOR}"
	sleep 1
	echo

	## Removes package files that can no longer be downloaded and everything except
	# the lock file in /var/cache/apt/archives, including directories.
	sudo apt autoclean -y; sudo apt clean -y;
	echo
	echo -e "${GREEN}▸ Finished cleaning up downloaded packages ${ENDCOLOR}"
	sleep 1

	echo
	echo -e "${GREEN}▸ Checking to see if a reboot is required ${ENDCOLOR}"
	## Check to see if a reboot is required
	if [ -f /var/run/reboot-required ]; then
 		echo
  		echo -e "${MAGENTA}* * * * * * * * * * * * * * * * * *${ENDCOLOR}"
 		echo -e "${MAGENTA}*${ENDCOLOR} 	Dear $USERNAME"
  		echo -e "${MAGENTA}*${ENDCOLOR}"
 		echo -e "${MAGENTA}*${ENDCOLOR}  Consider rebooting your system"  
  		echo -e "${MAGENTA}*${ENDCOLOR}  to finish applying updates"      
  		echo -e "${MAGENTA}*${ENDCOLOR}  requested by the following"      
		echo -e "${MAGENTA}*${ENDCOLOR}  packages:"						
  		echo -e "${MAGENTA}*${ENDCOLOR} "
		if [ -f /var/run/reboot-required.pkgs ]; then
        	uniq < /var/run/reboot-required.pkgs
			echo -e "${MAGENTA}* * * * * * * * * * * * * * * * * *${ENDCOLOR}"
    	else
        	echo -e "${YELLOW}Cannot find the list of packages... Skipping ${ENDCOLOR}"
    	fi
		sleep 1
	else 
		echo
		echo -e "${YELLOW}  No reboot is required at this time...  ${ENDCOLOR}"
		echo -e "${YELLOW}  Happy to be $(uptime -p) ${ENDCOLOR}"
		echo -e "${YELLOW}  and serve you since $(uptime -s)... ${ENDCOLOR}"
		echo -e "${YELLOW}  Enjoy your system... ${ENDCOLOR}"
		echo
		sleep 1
	fi
	sleep 1
	echo
	echo -e "${GREEN}▸ Checking Disk usage after System Maintenance ${ENDCOLOR}"
	echo
	df_output=$(df -h / | awk 'NR==2 {print "Percentage of disk space used:", $5, "\nFree space available:", $4}')
	echo -e "${YELLOW}${df_output}${ENDCOLOR}"
	echo
	sleep 1

}

function UPGRADE_EOL_TO_NEXT {

	cp "/etc/apt/sources.list" "/etc/apt/sources.eol_${DATE}"
	cat <<EOT > /etc/apt/sources.list
deb http://old-releases.ubuntu.com/ubuntu/ $DIST_CODENAME main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ $DIST_CODENAME-updates main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ $DIST_CODENAME-security main restricted universe multiverse

EOT

sudo apt install update-manager-core
sudo apt dist-upgrade -y
sudo do-release-upgrade
}

function UPGRADE_TO_NEXT_RELEASE {
	sleep 1
	echo "##########################################"
	echo "uCareSystem will now check for the"
	echo "availability of the next version"
	echo "and it will start the upgrade"
	echo "##########################################"
	echo ""
	sleep 1
	do-release-upgrade
	sleep 2
}

function UPGRADE_TO_DEVEL_RELEASE {
	sleep 1
	echo "##########################################"
	echo "uCareSystem will now check for the"
	echo "availability of the next development"
	echo "version and it will start the upgrade"
	echo "##########################################"
	echo ""
	sleep 1
	do-release-upgrade -d
	sleep 2
}

function SHOW_VERSION {
	echo -e "${CYAN}uCareSystem${ENDCOLOR} ${YELLOW}$UCARE_VERSION${ENDCOLOR}"
	echo -e "${MAGENTA}Release honored to: $VER_CODENAME${ENDCOLOR}"
	echo ""
	echo -e "${GREEN}Copyright (c) 2025 Salih Emin. All rights reserved.${ENDCOLOR}"
	echo -e "${GREEN}Licensed under GPL3 (http://www.gnu.org/licenses/gpl.html)${ENDCOLOR}"
	echo -e "${CYAN}WebSite: http://utappia.org${ENDCOLOR}"
	echo -e "${CYAN}Email: salih-emin@ubuntu.com${ENDCOLOR}"
	echo ""
	echo -e "${YELLOW}This is free software; you are free to change and redistribute it.${ENDCOLOR}"
	echo -e "${YELLOW}There is NO WARRANTY, to the extent permitted by law.${ENDCOLOR}"
}

function SHOW_HELP {
	cat << EOF
	
				     uCareSystem
				    ~ $UCARE_VERSION ~
			  Release honored to: $VER_CODENAME

		     All-in-one system update and maintenance app

	Usage: sudo ucaresystem-core <option> 
	
		If no option is specified, it performs the regular maintenance tasks.
		It updates system, snap, and flatpak packages, removes old kernels, old 
		Snap and flatpack revisions and unneeded packages, and cleans up 
		configurations of uninstalled packages.
	
	Options:

		 -h --help         Display this help and exit
		 
		 -v --version      Display version information and exit
		 
		 -u --upgrade      Upgrade to the next release. Note: If you use a
		                   regular release it will upgrade to the next one. If
		                   you are on a LTS version, it will upgrade only to 
		                   the next LTS.
		             
		 -d --development  Upgrade to the next development release

		 -eol --end-of-life-upgrade      
				   CAUTION: Do not use this if your Ubuntu has not
			  	   reached its End of life support.
			           Check https://wiki.ubuntu.com/Releases
			           This option is ONLY for Ubuntu releases that have
			           reached their EOL and you want to upgrade
			           it to the next supported version.
		 
		 -r --reboot       Reboot the system, after completing all the tasks, 

		 -s --shutdown     Shutdown the system, after completing all the tasks, 

	Support this project: $DONATE
	
EOF
}

function GOODBYE {
	sleep 1
	echo "___________________________________________________________"
	echo ""
	echo -e "            ${CYAN} uCareSystem $UCARE_VERSION ${ENDCOLOR}"
	echo "            ~~~~~~~~~~~~~~~~~~~~~"
	echo ""
	echo " I am deeply grateful for your generous donations"
	echo " during the $PREV_VER development cycle. Your contributions"
	echo " have been invaluable in helping me enhance and"
	echo " maintain the project. Thank you for believing in this"
	echo " project and for being a crucial part of its success." 
	echo ""
	echo " Dear $USERNAME, the following names are the legends"
	echo " of $PREV_VER development cycle, supporters:"
	echo ""
	echo " - P. Loughman"
	echo " - D. Emge"
	echo " - W. Schwartz"
	echo " - W. Schreinemachers"
	echo " - D. e Swarthout"
	echo " - D. Luchini"
	echo " - M. Stanley"
	echo " - N. Evangelista"
	echo ""
	echo -e "${CYAN}$DONATE ${ENDCOLOR}"
	echo ""
	sleep 2
	echo -e "     	${MAGENTA}All maintenance Complete on $((SECONDS / 60)) minutes and $((SECONDS % 60)) seconds.  GOODBYE${ENDCOLOR}"
	echo "___________________________________________________________"
	echo -e "     ${CYAN} Release honored to: $VER_CODENAME ${ENDCOLOR}"
	echo
	sleep 1
}

function SHUT_DOWN {
	sleep 1
	echo
	echo
	echo -e "${GREEN}▸ Shutting down as you requested ${ENDCOLOR}"
	echo
	MESSAGE="Shutting down..."
	COUNTDOWN $duration
	if command -v systemctl &> /dev/null; then
		sudo systemctl poweroff
	else
		sudo poweroff
	fi
}

function RE_BOOT {
	sleep 1
	echo
	echo
	echo -e "${GREEN}▸ Rebooting as you requested ${ENDCOLOR}"
	echo
	MESSAGE="Rebooting..."
	COUNTDOWN $duration
	if command -v systemctl &> /dev/null; then
		sudo systemctl reboot
	else
		sudo reboot
	fi
}

# The main process starts
while [ "$1" != "" ]; do
    case $1 in
        -u | --upgrade )     WELCOME_SCREEN && MAINTENANCE && UPGRADE_TO_NEXT_RELEASE
                             exit
                                ;;
        -d | --development ) WELCOME_SCREEN && MAINTENANCE && UPGRADE_TO_DEVEL_RELEASE
                             exit
                                ;;
        -h | --help )        SHOW_HELP
                             exit
                                ;;
        -v | --version )     SHOW_VERSION
                             exit
                                ;;
        -eol | --end-of-life-upgrade ) UPGRADE_EOL_TO_NEXT
                             exit
                                ;;
	-s | --shutdown )	 WELCOME_SCREEN && MAINTENANCE && GOODBYE && SHUT_DOWN
							 exit
							    ;;
	-r | --reboot )		 WELCOME_SCREEN && MAINTENANCE && GOODBYE && RE_BOOT
							 exit
							    ;;
        * )                  SHOW_HELP
                             exit 1
    esac
done
## If no parameter is given just do the regular maintenance
WELCOME_SCREEN && MAINTENANCE && GOODBYE

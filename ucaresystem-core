#!/usr/bin/pkexec /bin/bash
set -e
#
#
#_______________________________________________
#THIS IS THE Terminal Version of uCareSystem
#_______________________________________________
# Name   : uCareSystem
# License: GPL3 (http://www.gnu.org/licenses/gpl.html)
# Author : Salih Emin
# WebSite: http://utappia.org
# Email  : salih-(at)-utappia.org
# Date   : 25-04-2024 (first release 19-02-2009)
# Version: 24.04.0
# System : Ubuntu Linux and derivatives. Partial support for Debian
# Description:
#This simple script will automatically refresh your package list, download and install
#updates (if there are any),
#remove any remaining packages and configuration files without interference.
#
## Script starts here

#Variables
DIST_CODENAME=$(lsb_release --codename | cut -f2)
DATE=(date +%F_%T)
UCARE_VERSION=(24.04.0)

# Checking if the user has run the script with "sudo" or not
if [[ $EUID -ne 0 ]] ; then
    clear
    echo ""
    echo "uCareSystem must be run as root or with sudo. Now I will just exit..." 1>&2
    echo ""
    sleep 2
    exit 1
fi
# Function to check internet connectivity
function CHECK_INTERNET {
    if ping -q -c 1 -W 1 archive.ubuntu.com &> /dev/null; then
        return 0  # Internet connection is available
    else
        return 1  # No internet connection
    fi
}
# Check internet connectivity
if ! CHECK_INTERNET; then
   echo "No internet connection detected... "
   sleep 1
   echo "Please ensure that your device is connected to the internet,"
   echo "and try again.... Now I will just exit..." 1>&2
   echo ""
   sleep 2
   exit 1
fi

# Simple countdown function
function COUNTDOWN {
    	secs=$1
	while [ $secs -gt 0 ]; do
		echo -ne "uCareSystem will start in $secs seconds... \r"
		sleep 1
		: $((secs--))
	done
	
	}
duration=5 # countdown duration in seconds

function WELCOME_SCREEN {
	echo "_______________________________________________________"
	echo "                                                       "
	echo "            uCareSystem $UCARE_VERSION                 "
	echo "            ~~~~~~~~~~~~~~~~~~~~~                      "
	echo "                                                       "
	echo " Welcome to all-in-one System Update and maintenance   "
	echo " assistant app.                                        "
	echo "                                                       "
	echo "                                                       "
	echo " This simple script will automatically         	     "
	echo " refresh your packagelist, download and                "
	echo " install updates (if there are any), remove any old    "
	echo " kernels, obsolete packages and configuration files    "
	echo " to free up disk space, without any need of user       "
	echo " interference                                          "
	echo "                   				                     "
	echo " If youâ€™ve found it useful and saved you time and you  "
	echo " think it is worth of your support, you can make a     "
	echo " donation via PayPal by clicking on the following:     "
	echo "                                                       "
	echo "           https://www.paypal.me/cerebrux              "
	echo "_______________________________________________________"
	echo
	# start the countdown
	COUNTDOWN $duration
}

function MAINTENACE {
	echo
	echo
	echo "#########################"
	echo "          Started"
	echo "#########################"
	echo
	sleep 1
	echo
	echo "#######################################"
	echo "Checking Disk before System Maintenance"
	echo "#######################################"
	echo
	df_output=$(df -h / | awk 'NR==2 {print "Percentage of disk space used:", $5, "\nFree space available:", $4}')
	echo "Here is the disk space before cleaning"
	echo "$df_output"
	echo
	sleep 1

	## Updates package lists
	echo "Updating package lists..."
	echo
	sudo apt update;
	echo
	echo "###############################"
	echo "Finished updating package lists"
	echo "###############################"
	sleep 1

	## Updates packages and libraries
	sudo apt full-upgrade -y;
	echo
	echo "###############################################"
	echo "Finished updating packages and system libraries"
	echo "###############################################"
	sleep 1
	echo

	## Removes unneeded packages
	sudo sudo apt autoremove -y --purge;
	echo					
	echo "###################################"
	echo "Finished removing unneeded packages"
	echo "###################################"
	sleep 1
	echo
	echo "Checking for Snap updates and removing old revisions..."
	echo
	# Check if Snap is installed
	if command -v snap &> /dev/null; then
	# Stop all running Snap applications
		echo "Stopping all running Snap applications..."
		stopped_snaps=()
		while IFS= read -r snapname; do
			if sudo snap stop "$snapname" &>/dev/null; then
				stopped_snaps+=("$snapname")
			fi
		done < <(sudo snap list | awk '/^name/ {next} {print $1}')

		# Print the names of stopped Snap applications
		if [ ${#stopped_snaps[@]} -gt 0 ]; then
			echo "Stopped Snap applications:"
			for snapname in "${stopped_snaps[@]}"; do
				echo "$snapname"
			done
		else
			echo "No Snap applications were stopped."
		fi

		# Check for updates and install them
		echo "Checking for updates and installing them..."
		echo
		sudo snap refresh

		# Remove old revisions of Snap packages
		echo
		echo "Removing old revisions of Snap packages..."
		LANG=C sudo snap list --all | awk '/disabled/{print $1, $3}' | 
			while read snapname revision; do
				sudo snap remove "$snapname" --revision="$revision"
			done

		echo "Old revisions of Snap packages removed successfully."
	else
		echo
		echo "Snap is not available on this system. Skipping."
		sleep 1
	fi
# Start previously stopped Snap applications
echo "Starting previously stopped Snap applications..."
for snapname in "${stopped_snaps[@]}"; do
    sudo snap start "$snapname" &>/dev/null
done

# Print the names of started Snap applications
if [ ${#stopped_snaps[@]} -gt 0 ]; then
    echo "Started Snap applications:"
    for snapname in "${stopped_snaps[@]}"; do
        echo "$snapname"
    done
else
    echo "No Snap applications were started."
fi

	echo					
	echo "####################################"
	echo "Finished refreshing of Snap packages"
	echo "####################################"
	sleep 1
	echo

	# purge-old-kernels - remove old kernel packages
	#    Copyright (C) 2012 Dustin Kirkland <kirkland -(at)- ubuntu.com>
	#
	#    Authors: Dustin Kirkland <kirkland-(at)-ubuntu.com>
	#             Kees Cook <kees-(at)-ubuntu.com>
	#
	# NOTE: This script will ALWAYS keep the currently running kernel
	# NOTE: Default is to keep 2 more, user overrides with --keep N
	KEEP=2
	# NOTE: Any unrecognized option will be passed straight through to apt
	APT_OPTS=
	while [ ! -z "$1" ]; do
		case "$1" in
			--keep)
				# User specified the number of kernels to keep
				KEEP="$2"
				shift 2
			;;
			*)
				APT_OPTS="$APT_OPTS $1"
				shift 1
			;;
		esac
	done

	# Build our list of kernel packages to purge
	CANDIDATES=$(ls -tr /boot/vmlinuz-* | head -n -${KEEP} | grep -v "$(uname -r)$" | cut -d- -f2- | awk '{print "linux-image-" $0 " linux-headers-" $0}' )
	for c in $CANDIDATES; do
		dpkg-query -s "$c" >/dev/null 2>&1 && PURGE="$PURGE $c"
	done

	if [ -z "$PURGE" ]; then
		echo "No kernels are eligible for removal"
	fi

	sudo apt $APT_OPTS remove -y --purge $PURGE;

	echo
	echo "###################################"
	echo "Finished removing old kernels"
	echo "###################################"
	sleep 1
	echo
	## Removes unused config files
	sudo deborphan -n --find-config | xargs sudo apt autoremove -y --purge;
	echo
	echo "#####################################"
	echo "Finished removing unused config files"
	echo "#####################################"
	sleep 1
	echo

	## Removes package files that can no longer be downloaded and everything except
	# the lock file in /var/cache/apt/archives, including directories.
	sudo apt-get -y autoclean; sudo apt-get -y clean;
	echo
	echo "######################################"
	echo " Cleaned downloaded temporary packages"
	echo "######################################"
	echo
	sleep 1

	echo
	echo "#########################################"
	echo " Checking to see if a reboot is required "
	echo "#########################################"
	echo
	## Check to see if a reboot is required
	if [ -f /var/run/reboot-required ]; then
 		echo
  		echo "* * * * * * * * * * * * * * * * * *"
 		echo "*                                 *"
 		echo "* Consider rebooting your system  *"
  		echo "* to finish applying updates      *"
  		echo "*                                 *"
  		echo "* * * * * * * * * * * * * * * * * *"
  		echo
	fi
	sleep 1
	echo
	echo "######################################"
	echo "Checking Disk after System Maintenance"
	echo "######################################"
	echo
	df_output=$(df -h / | awk 'NR==2 {print "Percentage of disk space used:", $5, "\nFree space available:", $4}')
	echo "$df_output"
	echo
	sleep 1

}

function UPGRADE_EOL_TO_NEXT {

cp "/etc/apt/sources.list" "/etc/apt/sources.eol_${DATE}"
cat <<EOT > /etc/apt/sources.list
deb http://old-releases.ubuntu.com/ubuntu/ $DIST_CODENAME main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ $DIST_CODENAME-updates main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ $DIST_CODENAME-security main restricted universe multiverse

EOT

sudo apt-get install update-manager-core
sudo apt-get -y dist-upgrade
sudo do-release-upgrade
}

function UPGRADE_TO_NEXT_RELEASE {
	sleep 1
	echo "##########################################"
	echo "uCareSystem will now check for the        "
	echo "availability of the next version         "
	echo "and it will start the upgrade             "
	echo "##########################################"
	echo ""
	sleep 1
	do-release-upgrade
	sleep 2
}

function UPGRADE_TO_DEVEL_RELEASE {
	sleep 1
	echo "##########################################"
	echo "uCareSystem will now check for the        "
	echo "availability of the next development     "
	echo "version and it will start the upgrade     "
	echo "##########################################"
	echo ""
	sleep 1
	do-release-upgrade -d
	sleep 2
}

function SHOW_HELP {
	cat << EOF
	
				     uCareSystem
				    ~ $UCARE_VERSION ~
		     All-in-one system update and maintenance app

	Usage: sudo ucaresystem-core <parameter> 
	
	If no parameter is specified, it will just do the regular
	maintenance:
	
	 * Updates the list of available packages
	 * Downloads and installs the available updates
	 * Checks if there are older Linux kernels on the system and removes
	   them. However it keeps the current and one previous version of 
	   the kernel.
	 * Cleans the cache of the downloaded packages
	 * Removes obsolete packages
	 * Removes orphan packets
	 * Deletes package configuration files from packages that have been
	   uninstalled by you.
	
	Parameter:	 
		 -h          display this help and exit
		 
		 -u          Upgrade to the next release. Note: If you use a
		             regular release it will upgrade to the next one. If
		             you are on a LTS version, it will upgrade only to 
		             the next LTS.
		             
		 -d          Upgrade to the next development release

		 -eol        CAUTION: Do not use this if your Ubuntu has not 
			     reached its End of life support.
				    Check https://wiki.ubuntu.com/Releases
			     This option is for Ubuntu releases that have
			     reached their EOL and the user wants to upgrade
			     it to the next supported version.
		 
		 -r          After completing all the tasks, reboot the system
		 
		 -s	         After completing all the tasks, shutdown the system

EOF
}

function GOODBYE {
	sleep 2
	echo
	echo
	echo "#########################"
	echo "     All Done... GOODBYE"
	echo "#########################"
}

function SHUT_DOWN {
	sleep 1
	echo
	echo
	echo "#########################"
	echo "      Shutting down"
	echo "#########################"
	sudo shutdown now
}

function RE_BOOT {
	sleep 1
	echo
	echo
	echo "#########################"
	echo "        Rebooting"
	echo "#########################"
	sudo reboot
	## End of script
}

# The main process starts
while [ "$1" != "" ]; do
    case $1 in
        -u | --upgrade )     WELCOME_SCREEN && MAINTENACE && UPGRADE_TO_NEXT_RELEASE
                             exit
                                ;;
        -d | --development ) WELCOME_SCREEN && MAINTENACE && UPGRADE_TO_DEVEL_RELEASE
                             exit
                                ;;
        -h | --help )        SHOW_HELP
                             exit
                                ;;
        -eol | --end-of-life-upgrade ) UPGRADE_EOL_TO_NEXT
                             exit
                                ;;
	-s | --shutdown )	 WELCOME_SCREEN && MAINTENACE && GOODBYE && SHUT_DOWN
							 exit
							    ;;
	-r | --reboot )		 WELCOME_SCREEN && MAINTENACE && GOODBYE && RE_BOOT
							 exit
							    ;;
        * )                  SHOW_HELP
                             exit 1
    esac
done
## If no parameter is given just do the regular maintenance
WELCOME_SCREEN && MAINTENACE && GOODBYE
